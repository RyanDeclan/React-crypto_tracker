{"version":3,"sources":["api.ts","routes/atoms.ts","routes/Chart.tsx","routes/Price.tsx","routes/Coin.tsx","routes/CoinDetail.tsx","routes/Coins.tsx","Router.tsx","theme.ts","App.tsx","index.tsx"],"names":["BASE_URL","fetchCoins","fetch","then","response","json","fetchCoinTickers","coinId","isDarkAtom","atom","key","default","Chart","isDark","useRecoilValue","useQuery","endDate","Math","floor","Date","now","startDate","fetchCoinHistory","isLoading","data","console","log","type","series","map","price","time_open","getTime","open","high","low","close","options","theme","mode","chart","height","width","toolbar","show","background","grid","yaxis","xaxis","labels","axisTicks","axisBorder","categories","time_close","slice","plotOptions","candlestick","colors","upward","downward","tooltip","y","formatter","value","toFixed","Price","Title","styled","h1","props","accentColor","Loader","span","Container","div","Header","header","Overview","OverviewItem","Description","p","Tabs","Tab","exist","secondColor","Coin","useParams","state","useLocation","priceMatch","useMatch","chartMatch","fetchCoinInfo","infoLoading","infoData","refetchInterval","tickersLoading","tickersData","loading","Helmet","name","rank","symbol","quotes","USD","description","total_supply","max_supply","to","path","element","DetailList","Detail","Red","Blud","CoinDetail","id","exLoading","exData","exchange","volume","marketCap","volume_24h","market_cap","usd","krw","percent_change_24h","toLocaleString","split","CoinsList","ul","li","textColor","Img","img","Box","BoxHeader","HeaderName","Coins","setDarkAtom","useSetRecoilState","onClick","prev","coin","src","toLowerCase","Router","basename","process","darkTheme","bgColor","lightTheme","GlobalStyle","createGlobalStyle","App","initialIsOpen","queryClient","QueryClient","ReactDOM","render","StrictMode","client","document","getElementById"],"mappings":"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","file":"static/js/main.b6fc04fa.chunk.js","sourcesContent":["const BASE_URL = `https://api.coinpaprika.com/v1`;\n\nexport function fetchCoins() {\n  return fetch(`${BASE_URL}/coins`).then((response) => response.json());\n}\n\nexport function fetchCoinInfo(coinId: string) {\n  return fetch(`${BASE_URL}/coins/${coinId}`).then((response) =>\n    response.json()\n  );\n}\n\nexport function fetchCoinTickers(coinId: string) {\n  return fetch(`${BASE_URL}/tickers/${coinId}`).then((response) =>\n    response.json()\n  );\n}\n\n//여기서 coinId는 아직 정의 되지않았음\n//사용자가 클릭했을때 coinId를 받는데 그때 이 함수에 coinId를 넣어 줄것임\n//그래서 미리 type을 정하기 위해 저렇게 씀\n\nexport function fetchCoinHistory(coinId: string) {\n  const endDate = Math.floor(Date.now() / 1000);\n  const startDate = endDate - 60 * 60 * 23;\n  // * 2 를 하면 2주가 됌\n  return fetch(\n    `${BASE_URL}/coins/${coinId}/ohlcv/historical?start=${startDate}&end=${endDate}`\n  ).then((response) => response.json());\n}\n\nconst change_BASE_URL = `https://cdn.jsdelivr.net/gh/fawazahmed0/currency-api@1/latest/currencies/usd.json`\n\nexport function exchangeRate(){\n  return fetch(`${change_BASE_URL}`).then((response)=> response.json())\n}","import { atom } from \"recoil\";\n\nexport const isDarkAtom = atom({\n  key: \"isDark\",\n  default: true,\n});\n","import { useQuery } from \"react-query\";\nimport { fetchCoinHistory } from \"../api\";\nimport ApexChart from \"react-apexcharts\";\nimport { isDarkAtom } from \"./atoms\";\nimport { useRecoilValue } from \"recoil\";\n\ninterface ChartProps {\n  coinId: string;\n}\n\ninterface IHistorical {\n  time_open: string;\n  time_close: string;\n  open: number;\n  high: number;\n  low: number;\n  close: number;\n  volume: number;\n  market_cap: number;\n}\n\nfunction Chart({ coinId }: ChartProps) {\n  const isDark = useRecoilValue(isDarkAtom);\n  const { isLoading, data } = useQuery<IHistorical[]>([\"ohlcv\", coinId], () =>\n    fetchCoinHistory(coinId)\n  );\n  console.log(data)\n  return (\n    <h1>\n      {isLoading ? (\n        \"Loading chart...\"\n      ) : (\n        <ApexChart\n          type=\"candlestick\"\n          series={[\n            {\n   \n              data: data?.map((price) => [new Date(price.time_open).getTime(),price.open,price.high,price.low,price.close,]),\n            },\n          \n          ]}\n          options={{\n            theme: { mode: isDark ? \"dark\" : \"light\" },\n            chart: {\n              height: 500,\n              width: 500,\n              toolbar: { show: false },\n              background: \"transparent\",\n            },\n            grid: { show: false },\n            yaxis: { show: false },\n            xaxis: {\n              labels: { show: false },\n              axisTicks: { show: false },\n              axisBorder: { show: false },\n              categories: data?.map((price) => price.time_close.slice(0, 10)),\n            },\n            plotOptions:{\n              candlestick:{\n                colors: { upward: \"#DF7D46\",downward: \"#3C90EB\", } as any,\n              }\n            },\n            \n            tooltip: {\n              y: {\n                formatter: (value) => `$${value.toFixed(2)}`,\n              },\n            },\n           \n          }}\n        />\n      )}\n    </h1>\n  );\n}\n\nexport default Chart;\n","\n\nfunction Price() {\n\n  return <h1>price </h1>;\n}\n\nexport default Price;\n","import { useLocation, useParams } from \"react-router\";\nimport styled from \"styled-components\";\nimport { Routes, Route, Link } from \"react-router-dom\";\nimport Chart from \"./Chart\";\nimport Price from \"./Price\";\nimport { useMatch } from \"react-router-dom\";\nimport { useQuery } from \"react-query\";\nimport { fetchCoinInfo, fetchCoinTickers } from \"../api\";\nimport { Helmet } from \"react-helmet\";\n\nconst Title = styled.h1`\n  font-size: 48px;\n  color: ${(props) => props.theme.accentColor};\n`;\n\nconst Loader = styled.span`\n  text-align: center;\n  display: block;\n`;\n\nconst Container = styled.div`\n  padding: 0px 20px;\n  max-width: 480px;\n  margin: 0 auto;\n`;\n\nconst Header = styled.header`\n  height: 15vh;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`;\n\nconst Overview = styled.div`\n  display: flex;\n  justify-content: space-between;\n  background-color: rgba(0, 0, 0, 0.5);\n  padding: 10px 20px;\n  border-radius: 10px;\n  color: white;\n`;\nconst OverviewItem = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  span:first-child {\n    font-size: 10px;\n    font-weight: 400;\n    text-transform: uppercase;\n    margin-bottom: 5px;\n  }\n`;\nconst Description = styled.p`\n  margin: 20px 0px;\n`;\n\nconst Tabs = styled.div`\n  display: grid;\n  grid-template-columns: repeat(2, 1fr);\n  margin: 25px 0px;\n  gap: 10px;\n`;\n\nconst Tab = styled.span<{ exist: boolean }>`\n  //신기하다 exist는 객체 or null 을 받는데 boolean으로 해도 되넹 ??\n  //console.log(Boolean(priceMatch)) 이렇게 해보면\n  // 존재하면 true 이고 존재하지 않으면 false로 나옴\n  //즉 exist는 객체 또는 null을 반환하기떄문에\n  // 타입스크립트에게 boolean으로  인식하게 만든다면\n  // 객체를 반환할때는 exist:true가 될것이고 null을 반환할때는\n  //exist:false가 될 것이다.\n  text-align: center;\n  text-transform: uppercase;\n  font-size: 12px;\n  font-weight: 400;\n  background-color: rgba(0, 0, 0, 0.5);\n  padding: 7px 0px;\n  border-radius: 10px;\n  color: ${(props) =>\n    props.exist ? props.theme.accentColor : props.theme.secondColor};\n  // props는 exist를 받는데 props.theme 으로한다면 기본적으로\n  //styled 로 만든 html은 props.theme에 접글할 수있다.\n  // 우리가 초기에 theme을 import { DefaultTheme } from \"styled-components\";\n  //이런식으로 import한뒤 export const theme: DefaultTheme\n  //이렇게 다시 우리가 커스텀마이징해서 export해놓았기 때문에 접근이 가능\n  a {\n    display: block;\n  }\n`;\n\nexport interface IInfoData {\n  id: string;\n  name: string;\n  symbol: string;\n  rank: number;\n  is_new: boolean;\n  is_active: boolean;\n  type: string;\n  tags: Tag[];\n  team: Team[];\n  description: string;\n  message: string;\n  open_source: boolean;\n  started_at: Date;\n  development_status: string;\n  hardware_wallet: boolean;\n  proof_type: string;\n  org_structure: string;\n  hash_algorithm: string;\n  links: Links;\n  links_extended: LinksExtended[];\n  whitepaper: Whitepaper;\n  first_data_at: Date;\n  last_data_at: Date;\n}\n\nexport interface Links {\n  explorer: string[];\n  facebook: string[];\n  reddit: string[];\n  source_code: string[];\n  website: string[];\n  youtube: string[];\n}\n\nexport interface LinksExtended {\n  url: string;\n  type: string;\n  stats?: Stats;\n}\n\nexport interface Stats {\n  subscribers?: number;\n  contributors?: number;\n  stars?: number;\n  followers?: number;\n}\n\nexport interface Tag {\n  id: string;\n  name: string;\n  coin_counter: number;\n  ico_counter: number;\n}\n\nexport interface Team {\n  id: string;\n  name: string;\n  position: string;\n}\n\nexport interface Whitepaper {\n  link: string;\n  thumbnail: string;\n}\n\nexport interface IPriceInfoData {\n  id: string;\n  name: string;\n  symbol: string;\n  rank: number;\n  circulating_supply: number;\n  total_supply: number;\n  max_supply: number;\n  beta_value: number;\n  first_data_at: Date;\n  last_updated: Date;\n  quotes: Quotes;\n}\n\nexport interface Quotes {\n  USD: Usd;\n}\n\nexport interface Usd {\n  price: number;\n  volume_24h: number;\n  volume_24h_change_24h: number;\n  market_cap: number;\n  market_cap_change_24h: number;\n  percent_change_15m: number;\n  percent_change_30m: number;\n  percent_change_1h: number;\n  percent_change_6h: number;\n  percent_change_12h: number;\n  percent_change_24h: number;\n  percent_change_7d: number;\n  percent_change_30d: number;\n  percent_change_1y: number;\n  ath_price: number;\n  ath_date: Date;\n  percent_from_price_ath: number;\n}\n\nfunction Coin() {\n  const { coinId } = useParams() as { coinId: string };\n  const { state } = useLocation() as { state: { name: string } };\n  const priceMatch = useMatch(\"/:coinId/price\");\n  const chartMatch = useMatch(\"/:coinId/chart\");\n  const { isLoading: infoLoading, data: infoData } = useQuery<IInfoData>(\n    [\"info\", coinId],\n    () => fetchCoinInfo(coinId)\n  );\n  const { isLoading: tickersLoading, data: tickersData } =\n    useQuery<IPriceInfoData>(\n      [\"tickers\", coinId],\n      () => fetchCoinTickers(coinId),\n      {\n        refetchInterval: 10000,\n      }\n    );\n  /*  const [loading, setLoading] = useState(true);\n  const [info, setInfo] = useState<IInfoData>();\n  const [priceInfo, setPriceInfo] = useState<IPriceInfoData>();\n\n  useEffect(() => {\n    (async () => {\n      const infoData = await (\n        await fetch(`https://api.coinpaprika.com/v1/coins/${coinId}`)\n      ).json();\n\n      const priceData = await (\n        await fetch(`https://api.coinpaprika.com/v1/tickers/${coinId}`)\n      ).json();\n      setInfo(infoData);\n      setPriceInfo(priceData);\n      setLoading(false);\n    })();\n  }, []); */\n  const loading = infoLoading || tickersLoading;\n  return (\n    <Container>\n      <Helmet>\n        <title>\n          {state?.name ? state.name : loading ? \"Loading...\" : infoData?.name}\n        </title>\n      </Helmet>\n      <Header>\n        <Title>\n          {state?.name ? state.name : loading ? \"Loading...\" : infoData?.name}\n        </Title>\n      </Header>\n      {loading ? (\n        <Loader>Loading...</Loader>\n      ) : (\n        <>\n          <Overview>\n            <OverviewItem>\n              <span>Rank:</span>\n              <span>{infoData?.rank}</span>\n            </OverviewItem>\n            <OverviewItem>\n              <span>Symbol:</span>\n              <span>${infoData?.symbol}</span>\n            </OverviewItem>\n            <OverviewItem>\n              <span>Price:</span>\n              <span>${tickersData?.quotes.USD.price.toFixed(2)}</span>\n            </OverviewItem>\n          </Overview>\n          <Description>{infoData?.description}</Description>\n          <Overview>\n            <OverviewItem>\n              <span>Total Suply:</span>\n              <span>{tickersData?.total_supply}</span>\n            </OverviewItem>\n            <OverviewItem>\n              <span>Max Supply:</span>\n              <span>{tickersData?.max_supply}</span>\n            </OverviewItem>\n          </Overview>\n          <Tabs>\n            <Tab exist={chartMatch !== null}>\n              <Link to={`/${coinId}/chart`}>Chart</Link>\n            </Tab>\n            <Tab exist={priceMatch !== null}>\n              <Link to={`/${coinId}/price`}>Price</Link>\n            </Tab>\n          </Tabs>\n\n          <Routes>\n            <Route path=\"price\" element={<Price />}></Route>\n            <Route path=\"chart\" element={<Chart coinId={coinId} />} />\n          </Routes>\n        </>\n      )}\n    </Container>\n  );\n}\nexport default Coin;\n","import { useQuery } from \"react-query\";\nimport { exchangeRate, fetchCoinTickers } from \"../api\";\nimport styled from \"styled-components\";\n\nexport interface IPriceInfoData {\n    circulating_supply: number;\n    id: string;\n    name: string;\n    symbol: string;\n    rank: number;\n    total_supply: number;\n    max_supply: number;\n    beta_value: number;\n    first_data_at: Date;\n    last_updated: Date;\n    quotes: Quotes;\n  }\n  \n  export interface Quotes {\n    USD: Usd;\n  }\n  \n  export interface Usd {\n    price: number;\n    volume_24h: number;\n    volume_24h_change_24h: number;\n    market_cap: number;\n    market_cap_change_24h: number;\n    percent_change_15m: number;\n    percent_change_30m: number;\n    percent_change_1h: number;\n    percent_change_6h: number;\n    percent_change_12h: number;\n    percent_change_24h: number;\n    percent_change_7d: number;\n    percent_change_30d: number;\n    percent_change_1y: number;\n    ath_price: number;\n    ath_date: Date;\n    percent_from_price_ath: number;\n  }\n\n  export interface Postprops{\n      ids:string;\n      key:string;\n  }\n\n  export interface IExchange {\n    date: Date;\n    usd:  { [key: string]: number };\n}\n\nconst DetailList = styled.div`\n    display:grid;\n    grid-template-columns: repeat(4, 1fr);\n    width:83%;\n\n    \n`\n\nconst Detail = styled.div`\n\n \n        display:flex;\n        justify-content: end;\n\n`\n\nconst Red = styled.span`\n    color:red;\n\n`\n\nconst Blud = styled.span`\n    color:blue;\n`\n\nfunction CoinDetail(props:any){\n    const coinId = props.id\n    const { isLoading: tickersLoading, data: tickersData } =\n    useQuery<IPriceInfoData>(\n      [\"tickers\", coinId],\n      () => fetchCoinTickers(coinId),\n      {\n        refetchInterval: 20000,\n      }\n \n    );\n\n    const {isLoading: exLoading, data: exData} = useQuery<IExchange>(\n        [\"exchange\"],\n        () => exchangeRate(),\n    );    \n        //console.log(exData?.usd.krw)\n    let price : Number  = 0\n    let exchange  : Number = 0\n    let volume : Number = 0  \n    let marketCap : Number = 0\n    if(!tickersLoading){\n         price = tickersData!.quotes.USD.price\n         volume = tickersData!.quotes.USD.volume_24h\n         marketCap = tickersData!.quotes.USD.market_cap\n        \n    }\n    if(!exLoading){\n         exchange = exData!.usd.krw\n    }\n\n\n    return(\n        <>\n            {tickersLoading  ? \n                <span>loding...</span>\n                : <>\n                    <DetailList>\n                        <Detail> {tickersData!.quotes.USD.percent_change_24h > 0 ? <Red>▲ {tickersData!.quotes.USD.percent_change_24h}%</Red> : <Blud>▼ {tickersData!.quotes.USD.percent_change_24h}%</Blud> }</Detail>\n                        <Detail> {(+volume * +exchange).toLocaleString().split(\".\")[0]} 원</Detail>\n                        <Detail> {(+marketCap * +exchange).toLocaleString().split(\",\")[0]} 조원</Detail>  \n                        <Detail> {(+price * +exchange).toLocaleString().split(\".\")[0]} 원 </Detail>\n                    </DetailList>\n                </>\n                \n                }\n       \n      \n        </>\n    )\n}\n\nexport default CoinDetail","import styled from \"styled-components\";\nimport { Link } from \"react-router-dom\";\nimport { useQuery } from \"react-query\";\nimport { fetchCoins } from \"../api\";\nimport { Helmet } from \"react-helmet\";\nimport { useSetRecoilState } from \"recoil\";\nimport { isDarkAtom } from \"./atoms\";\n\nimport CoinDetail from \"./CoinDetail\";\nconst Container = styled.div`\n  padding: 0px 20px;\n  max-width: 90vw;\n  margin: 0 auto;\n  // 이렇게 max-width랑 margin을 해주면 화면을 크게 했을때도\n  //모바일화면처럼 가운데 위치하게된다.\n`;\n\nconst Header = styled.header`\n  height: 15vh;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`;\n\nconst CoinsList = styled.ul``;\n\nconst Coin = styled.li`\n  background-color: white;\n  color: ${(props) => props.theme.textColor};\n  border-radius: 15px;\n  margin-bottom: 10px;\n  a {\n    display: flex;\n    align-items: center;\n    padding: 20px;\n    transition: color 0.2s ease-in;\n  }\n  &:hover {\n    a {\n      color: ${(props) => props.theme.accentColor};\n    }\n  }\n`;\n\nconst Title = styled.h1`\n  font-size: 48px;\n  color: ${(props) => props.theme.accentColor};\n`;\n\nconst Loader = styled.span`\n  text-align: center;\n  display: block;\n`;\n\nconst Img = styled.img`\n  width: 35px;\n  height: 35px;\n  margin-right: 10px;\n`;\n\ninterface ICoin {\n  id: string;\n  name: string;\n  symbol: string;\n  rank: number;\n  is_new: boolean;\n  is_active: boolean;\n  type: string;\n}\n\n\n\nconst Box = styled.div`\n display: flex;\n justify-content: space-between;\n align-items: center;\n padding 0 2vw;\n \n\n`\n\nconst BoxHeader = styled.div`\nbackground-color: white;\ncolor: ${(props) => props.theme.textColor};\nborder-radius: 15px;\nmargin-bottom: 10px;\ndisplay: flex;\njustify-content: space-between;\nalign-items: center;\npadding 0  2vw;\n`\n\nconst HeaderName = styled.div`\n  height: 5vh;\n  display: flex;\n  align-items: center;\n  &:nth-child(1) {\n    padding-left:3vw\n  }\n  &:nth-child(2) {\n    padding-left:14vw\n  }\n  &:nth-child(3) {\n    padding-right:9vw\n  }\n  &:nth-child(4) {\n    padding-right:5vw\n  }\n  &:nth-child(5) {\n    padding-right:1vw\n  }\n\n`\n\nexport interface IPriceInfoData {\n  id: string;\n  name: string;\n  symbol: string;\n  rank: number;\n  circulating_supply: number;\n  total_supply: number;\n  max_supply: number;\n  beta_value: number;\n  first_data_at: Date;\n  last_updated: Date;\n  quotes: Quotes;\n  coco: Function;\n}\n\nexport interface Quotes {\n  USD: Usd;\n}\n\nexport interface Usd {\n  price: number;\n  volume_24h: number;\n  volume_24h_change_24h: number;\n  market_cap: number;\n  market_cap_change_24h: number;\n  percent_change_15m: number;\n  percent_change_30m: number;\n  percent_change_1h: number;\n  percent_change_6h: number;\n  percent_change_12h: number;\n  percent_change_24h: number;\n  percent_change_7d: number;\n  percent_change_30d: number;\n  percent_change_1y: number;\n  ath_price: number;\n  ath_date: Date;\n  percent_from_price_ath: number;\n}\n\nfunction Coins() {\n  const setDarkAtom = useSetRecoilState(isDarkAtom);\n  const toggleDarkAtom = () => setDarkAtom((prev) => !prev);\n  const { isLoading, data } = useQuery<ICoin[]>(\"allCoins\", fetchCoins);\n\n\n  return (\n    <Container>\n      <Helmet>\n        <title>코인</title>\n      </Helmet>\n      <Header>\n        <Title>코인</Title>\n        <button onClick={toggleDarkAtom}>Toggle Mode</button>\n      </Header>\n      {isLoading ? (\n        <Loader>\"Loading ... \"</Loader>\n      ) : (\n        <CoinsList>\n          <BoxHeader>\n            <HeaderName>코인명</HeaderName>\n            <HeaderName>24시간 대비</HeaderName>\n            <HeaderName>거래 대금</HeaderName>\n            <HeaderName>시가총액</HeaderName>\n            <HeaderName>현재가</HeaderName>\n          </BoxHeader>\n          {data?.slice(0, 13).map((coin) => (\n            <Coin key={coin.id}>\n            \n              \n              <Box>\n                <Link\n                  to={`/${coin.id}`}\n                  state={{ name: coin.name, rank: coin.rank }}\n                >\n            \n                  <Img\n                    src={`https://coinicons-api.vercel.app/api/icon/${coin.symbol.toLowerCase()}`}\n                  />\n                  {coin.name}\n                  \n                </Link>\n                <CoinDetail key={coin.id} id={coin.id}></CoinDetail>\n              </Box>\n            </Coin>\n          ))}\n        </CoinsList>\n      )}\n    </Container>\n  );\n}\nexport default Coins;\n","import { BrowserRouter } from \"react-router-dom\";\nimport { Routes, Route } from \"react-router-dom\";\nimport Coin from \"./routes/Coin\";\nimport Coins from \"./routes/Coins\";\n\nfunction Router() {\n  return (\n    <BrowserRouter basename={process.env.PUBLIC_URL}>\n      <Routes>\n        <Route path=\"/\" element={<Coins />}></Route>\n        <Route path=\"/:coinId/*\" element={<Coin />}></Route>\n      </Routes>\n    </BrowserRouter>\n  );\n}\n\nexport default Router;\n","import { DefaultTheme } from \"styled-components\";\n\nexport const darkTheme: DefaultTheme = {\n  bgColor: \"#2f3640\",\n  textColor: \"black\",\n  accentColor: \"#9c88ff\",\n  secondColor: \"white\",\n};\n\nexport const lightTheme: DefaultTheme = {\n  bgColor: \"#E8F5FF\",\n  textColor: \"#black\",\n  accentColor: \"#9c88ff\",\n  secondColor: \"white\",\n};\n","import { createGlobalStyle, ThemeProvider } from \"styled-components\";\nimport Router from \"./Router\";\nimport { ReactQueryDevtools } from \"react-query/devtools\";\nimport { darkTheme, lightTheme } from \"./theme\";\nimport { useRecoilValue } from \"recoil\";\nimport { isDarkAtom } from \"./routes/atoms\";\n\nconst GlobalStyle = createGlobalStyle`\n@import url('https://fonts.googleapis.com/css2?family=Source+Sans+Pro:wght@300;400&display=swap');\nfont-family: 'Source Sans Pro', sans-serif;\n/* http://meyerweb.com/eric/tools/css/reset/ \n   v2.0 | 20110126\n   License: none (public domain)\n*/\n\nhtml, body, div, span, applet, object, iframe,\nh1, h2, h3, h4, h5, h6, p, blockquote, pre,\na, abbr, acronym, address, big, cite, code,\ndel, dfn, em, img, ins, kbd, q, s, samp,\nsmall, strike, strong, sub, sup, tt, var,\nb, u, i, center,\ndl, dt, dd, ol, ul, li,\nfieldset, form, label, legend,\ntable, caption, tbody, tfoot, thead, tr, th, td,\narticle, aside, canvas, details, embed, \nfigure, figcaption, footer, header, hgroup, \nmenu, nav, output, ruby, section, summary,\ntime, mark, audio, video {\n\tmargin: 0;\n\tpadding: 0;\n\tborder: 0;\n\tfont-size: 100%;\n\tfont: inherit;\n\tvertical-align: baseline;\n}\n/* HTML5 display-role reset for older browsers */\narticle, aside, details, figcaption, figure, \nfooter, header, hgroup, menu, nav, section {\n\tdisplay: block;\n}\nbody {\n\tline-height: 1;\n}\nol, ul {\n\tlist-style: none;\n}\nblockquote, q {\n\tquotes: none;\n}\nblockquote:before, blockquote:after,\nq:before, q:after {\n\tcontent: '';\n\tcontent: none;\n}\ntable {\n\tborder-collapse: collapse;\n\tborder-spacing: 0;\n}\n*{\n  box-sizing:border-box;\n}\nbody {\n  font-family: 'Source Sans Pro', sans-serif;\n  background-color:${(props) => props.theme.bgColor};\n  color:${(props) => props.theme.textColor}\n}\na{\n  text-decoration : none;\n  color:inherit;\n}\n  `;\n\nfunction App() {\n  const isDark = useRecoilValue(isDarkAtom);\n  return (\n    <>\n      <ThemeProvider theme={isDark ? darkTheme : lightTheme}>\n        <GlobalStyle />\n        <Router />\n        <ReactQueryDevtools initialIsOpen={true} />\n      </ThemeProvider>\n    </>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { RecoilRoot } from \"recoil\";\nimport { QueryClient, QueryClientProvider } from \"react-query\";\nimport App from \"./App\";\n\nconst queryClient = new QueryClient();\n\nReactDOM.render(\n  <React.StrictMode>\n    <RecoilRoot>\n      <QueryClientProvider client={queryClient}>\n        <App />\n      </QueryClientProvider>\n    </RecoilRoot>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}